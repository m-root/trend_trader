import base64
import hashlib
import hmac
import json
import logging
import time
import urllib
import uuid
from urllib.parse import urlparse
import requests
from requests.auth import AuthBase


class BitMEX(object):
    """BitMEX API Connector."""

    def __init__(self, base_url=None, symbol=None, login=None, password=None, otpToken=None,
                 apiKey=None, apiSecret=None, shouldWSAuth=True):
        """Init connector."""
        self.base_url = base_url
        self.symbol = symbol
        self.token = None
        # User/pass auth is no longer supported
        if (login or password or otpToken):
            raise Exception("User/password authentication is no longer supported via the API. Please use " +
                            "an API key. You can generate one at https://www.bitmex.com/app/apiKeys")
        if (apiKey is None):
            raise Exception("Please set an API key and Secret to get started. See " +
                            "https://github.com/BitMEX/sample-market-maker/#getting-started for more information."
                            )
        self.apiKey = apiKey
        self.apiSecret = apiSecret
        # Prepare HTTPS session
        self.session = requests.Session()
        # These headers are always sent
        self.session.headers.update({'user-agent': 'liquidbot-' + 'v1.1'})
        self.session.headers.update({'content-type': 'application/json'})
        self.session.headers.update({'accept': 'application/json'})

    def authentication_required(function):
        """Annotation for methods that require auth."""

        def wrapped(self, *args, **kwargs):
            if not (self.apiKey):
                msg = "You must be authenticated to use this method"
                print(time.strftime("%d %b %Y %H:%M:%S", time.gmtime()), msg)
            else:
                return function(self, *args, **kwargs)

        return wrapped

    @authentication_required
    def close(self, symbol):
        endpoint = "order"
        # Generate a unique clOrdID with our prefix so we can identify it.
        clOrdID = base64.b64encode(uuid.uuid4().bytes).decode('utf-8').rstrip('=\n')
        postdict = {
            'symbol': symbol,
            'ordType': "Market",
            'execInst': "Close",
            'clOrdID': clOrdID
        }
        return self._curl_bitmex(path=endpoint, postdict=postdict, verb="POST")

    @authentication_required
    def place_order_limit(self, quantity, price, symbol, clOrdLinkID='', contingencyType=''):
        if price < 0:
            raise Exception("Price must be positive.")
        endpoint = "order"
        # Generate a unique clOrdID with our prefix so we can identify it.
        clOrdID = base64.b64encode(uuid.uuid4().bytes).decode('utf-8').rstrip('=\n')
        postdict = {
            'symbol': symbol,
            'orderQty': quantity,
            'price': price,
            'clOrdID': clOrdID,
            'clOrdLinkID': clOrdLinkID,
            'contingencyType': contingencyType
        }
        return self._curl_bitmex(path=endpoint, postdict=postdict, verb="POST")

    @authentication_required
    def place_order_stop(self, quantity, price, symbol, clOrdLinkID='', contingencyType=''):
        """Place an order."""
        if price < 0:
            raise Exception("Price must be positive.")
        endpoint = "order"
        # Generate a unique clOrdID with our prefix so we can identify it.
        clOrdID = base64.b64encode(uuid.uuid4().bytes).decode('utf-8').rstrip('=\n')
        postdict = {
            'symbol': symbol,
            'orderQty': quantity,
            'stopPx': price,
            'clOrdID': clOrdID,
            'clOrdLinkID': clOrdLinkID,
            'contingencyType': contingencyType
        }
        return self._curl_bitmex(path=endpoint, postdict=postdict, verb="POST")

    @authentication_required
    def place_order_trailling_stop(self, symbol, peg, quantity, clOrdLinkID='', contingencyType=''):
        """Place an order."""
        endpoint = "order"
        # Generate a unique clOrdID with our prefix so we can identify it.
        clOrdID = base64.b64encode(uuid.uuid4().bytes).decode('utf-8').rstrip('=\n')
        postdict = {
            'symbol': symbol,
            'orderType': 'Stop',
            'pegPriceType': 'TrailingStopPeg',
            'orderQty': quantity,
            'pegOffsetValue': peg,
            'clOrdID': clOrdID,
            'clOrdLinkID': clOrdLinkID,
            'contingencyType': contingencyType,
            'execInst': "LastPrice"
        }
        return self._curl_bitmex(path=endpoint, postdict=postdict, verb="POST")

    @authentication_required
    def update_limit_order(self, order_id, quantity, price):
        endpoint = "order"
        postdict = {
            'orderQty': quantity,
            'orderID': order_id,
            'price': price,
        }
        return self._curl_bitmex(path=endpoint, postdict=postdict, verb="PUT")


    @authentication_required
    def create_bulk_orders(self, orders):
        """Create multiple orders."""
        for order in orders:
            order['clOrdID'] = base64.b64encode(uuid.uuid4().bytes).decode('utf8').rstrip('=\n')
            order['symbol'] = self.symbol
        return self._curl_bitmex(path='order/bulk', postdict={'orders': orders}, verb='POST')

    @authentication_required
    def cancel(self, orderID):
        """Cancel an existing order."""
        api = "order"
        postdict = {
            'orderID': orderID,
        }
        return self._curl_bitmex(path=api, postdict=postdict, verb="DELETE")

    @authentication_required
    def cancel_all_bulk_orders(self):
        """Cancel all orders."""
        api = "order/all"
        postdict = {}
        return self._curl_bitmex(path=api, postdict=postdict, verb="DELETE")

    @authentication_required
    def cancel_all_orders(self,side):
        """Cancel all orders."""
        api = "order/all"
        postdict = {"filter":{"side":side}}
        return self._curl_bitmex(path=api, postdict=postdict, verb="DELETE")

    @authentication_required
    def wallet(self, currency):
        return self._curl_bitmex(path='user/wallet', postdict={'currency': currency}, verb="GET")

    def _curl_bitmex(self, path, verb, query=None, postdict=None):
        """Send a request to BitMEX Servers."""
        # Handle URL
        url = self.base_url + path

        auth = APIKeyAuthWithExpires(self.apiKey, self.apiSecret)

        # Make the request
        response = None

        logging.info("sending req to %s: %s" % (url, json.dumps(postdict or query or '')))
        req = requests.Request(verb, url, json=postdict, auth=auth, params=query)
        prepped = self.session.prepare_request(req)
        response = self.session.send(prepped, timeout=7)
        response.raise_for_status()
        return response.json()


def generate_nonce():
    return int(round(time.time() * 1000000))


# Generates an API signature.
# A signature is HMAC_SHA256(secret, verb + path + nonce + data), hex encoded.
# Verb must be uppercased, url is relative, nonce must be an increasing 64-bit integer
# and the data, if present, must be JSON without whitespace between keys.
#
# For example, in psuedocode (and in real code below):
#
# verb=POST
# url=/api/v1/order
# nonce=1416993995705
# data={"symbol":"XBTZ14","quantity":1,"price":395.01}
# signature = HEX(HMAC_SHA256(secret, 'POST/api/v1/order1416993995705{"symbol":"XBTZ14","quantity":1,"price":395.01}'))
def generate_signature(secret, verb, url, nonce, data):
    """Generate a request signature compatible with BitMEX."""
    # Parse the url so we can remove the base and extract just the path.
    parsedURL = urllib.parse.urlparse(url)
    path = parsedURL.path
    if parsedURL.query:
        path = path + '?' + parsedURL.query
    if isinstance(data, (bytes, bytearray)):
        data = data.decode('utf8')
    # print "Computing HMAC: %s" % verb + path + str(nonce) + data
    message = (verb + path + str(nonce) + data).encode('utf-8')

    signature = hmac.new(secret.encode('utf-8'), message, digestmod=hashlib.sha256).hexdigest()
    return signature


class APIKeyAuthWithExpires(AuthBase):

    def __init__(self, apiKey, apiSecret):
        self.apiKey = apiKey
        self.apiSecret = apiSecret

    def __call__(self, r):
        # modify and return the request
        expires = int(round(time.time()) + 5)  # 5s grace period in case of clock skew
        r.headers['api-expires'] = str(expires)
        r.headers['api-key'] = self.apiKey
        r.headers['api-signature'] = generate_signature(self.apiSecret, r.method, r.url, expires, r.body or '')

        return r


class AccessTokenAuth(AuthBase):
    def __init__(self, accessToken):
        self.token = accessToken

    def __call__(self, r):
        if (self.token):
            r.headers['access-token'] = self.token
        return r


class Liquidation(object):

    def __init__(self):
        self.avg_entry = 0
        self.qty = 0
        self.maker_fee = -0.00025
        self.taker_fee = 0.00075
        self.maintenance_margin = 0.005 - self.taker_fee

    def _initial_margin(self, lev):

        return (1 / lev) - self.taker_fee * 2

    def calc_buy(self, entry, qty, lev, funding_rate, new=True):

        if new:
            self.avg_entry = entry
            self.qty = qty
        else:
            ratios = [(qty / (self.qty + qty)), (self.qty / (self.qty + qty))]
            self.avg_entry = ((entry * ratios[0]) + (self.avg_entry * ratios[1]))
            self.qty += qty

        bankrupt = (self.avg_entry / (1 + self._initial_margin(lev)))
        liq = bankrupt + (self.avg_entry * (self.maintenance_margin + funding_rate))

        return liq

    def calc_sell(self, entry, qty, lev, funding_rate, new=True):

        if new:
            self.avg_entry = entry
            self.qty = qty
        else:
            ratios = [abs((qty / (self.qty + qty))), abs((self.qty / (self.qty + qty)))]
            print(sum(ratios))
            self.avg_entry = (entry * ratios[0]) + (self.avg_entry * ratios[1])
            self.qty += qty

        bankrupt = (self.avg_entry / (1 - self._initial_margin(lev)))
        liq = bankrupt - (self.avg_entry * (self.maintenance_margin - funding_rate))

        return liq